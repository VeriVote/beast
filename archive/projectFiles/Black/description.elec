{"name":"Black","code":"struct auto_intC condorcet_voting(struct auto_intVC votes) {\n    struct auto_intC r;\n    unsigned int i \u003d 0;\n    unsigned int j \u003d 0;\n    int ci \u003d 0;\n    int cj \u003d 0;\n    unsigned int found \u003d 0;\n    unsigned int k \u003d 0;\n    unsigned int l \u003d 0;\n    int score[C][C]; // 1, 0 or -1\n    int condorcet[C];\n\n    for (i \u003d 0; i \u003c C; i++) {\n        r.arr[i] \u003d 0;\n    }\n    for (i \u003d 0; i \u003c C; i++) {\n        for (j \u003d 0; j \u003c C; j++) {\n            score[i][j] \u003d 0;\n        }\n        condorcet[i] \u003d 0;\n    }\n\n    for (i \u003d 0; i \u003c C; i++) {\n        for (j \u003d 0; j \u003c C; j++) {\n            ci \u003d 0;\n            cj \u003d 0;\n            for (k \u003d 0; k \u003c V \u0026\u0026 i !\u003d j; k++) {\n                found \u003d 0;\n                for (l \u003d 0; l \u003c C; l++) {\n                    if (!found \u0026\u0026 votes.arr[k][l] \u003d\u003d i) {\n                        ci++;\n                        cj--;\n                        found \u003d 1;\n                    } else if (!found \u0026\u0026 votes.arr[k][l] \u003d\u003d j) {\n                        cj++;\n                        ci--;\n                        found \u003d 1;\n                    }\n                }\n            }\n            if (ci \u003c cj) {\n                score[i][j] \u003d -1;\n            } else if (cj \u003c ci) {\n                score[i][j] \u003d 1;\n            }\n        }\n    }\n\n    for (i \u003d 0; i \u003c C; i++) {\n        condorcet[i] \u003d 1;\n        for (j \u003d 0; j \u003c C; j++) {\n            if (i !\u003d j \u0026\u0026 score[i][j] !\u003d 1) {\n                condorcet[i] \u003d 0;\n            }\n        }\n    }\n\n    int max \u003d 0;\n    for (i \u003d 0; i \u003c C; i++) {\n        if (max \u003c condorcet[i]) {\n            max \u003d condorcet[i];\n            for (j \u003d 0; j \u003c C; j++) {\n                r.arr[j] \u003d 0;\n            }\n            r.arr[i] \u003d 1;\n        } else if (max \u003d\u003d condorcet[i]) {\n            r.arr[i] \u003d 1;\n        }\n    }\n    return r;\n}\n\n\nstruct auto_intC borda_voting(struct auto_intVC votes) {\n    struct auto_intC r;\n    unsigned int res[C];\n    unsigned int i \u003d 0;\n    unsigned int j \u003d 0;\n\n    for (i \u003d 0; i \u003c C; i++) {\n        r.arr[i] \u003d 1;\n    }\n    for (i \u003d 0; i \u003c C; i++) {\n        res[i] \u003d 0;\n    }\n    for (i \u003d 0; i \u003c V; i++) {\n        for (j \u003d 0; j \u003c C; j++) {\n            if (votes.arr[i][j] \u003c C) {\n                res[votes.arr[i][j]] +\u003d (C - j) - 1;\n            }\n        }\n    }\n    unsigned int max \u003d 0;\n    for (i \u003d 0; i \u003c C; i++) {\n        if (max \u003c res[i]) {\n            max \u003d res[i];\n            for (j \u003d 0; j \u003c C; j++) {\n                r.arr[j] \u003d 0;\n            }\n            r.arr[i] \u003d 1;\n        } else if (max \u003d\u003d res[i]) {\n            r.arr[i] \u003d 1;\n        }\n    }\n    return r;\n}\n\n\nunsigned int[C] voting(unsigned int amountVotes, unsigned int votes[amountVotes][C]) {\n\n    struct auto_intVC newVotes;\n    \n    for(int i \u003d 0; i \u003c V; i++) {\n        for(int j \u003d 0; j \u003c C; j++) {\n            newVotes.arr[i][j] \u003d votes[i][j];\n        }\n    }\n    \n\n    unsigned int i \u003d 0;\n    unsigned int cnt \u003d 0;\n\n    struct auto_intC r \u003d condorcet_voting(newVotes);\n    for (i \u003d 0; i \u003c C; i++) {\n        if (r.arr[i] \u003d\u003d 1) {\n            cnt++;\n        }\n    }\n\n    if (cnt !\u003d 1) {\n        r \u003d borda_voting(newVotes);\n    }\n\n    int toReturn[C];\n\n    for (i \u003d 0; i \u003c C; i++) {\n        toReturn[i] \u003d r.arr[i];\n    }\n\n    return toReturn;\n}","container":{"inType":{"type":"Preference","properties":{"unsigned":true,"dataType":"INT","dimensions":2,"sizeOfDimensions":["V","C"]}},"outType":{"type":"CandidateList","properties":{"unsigned":true,"dataType":"INT","dimensions":1,"sizeOfDimensions":["C"]}},"inputStruct":{"inOutType":{"type":"Preference","properties":{"unsigned":true,"dataType":"INT","dimensions":2,"sizeOfDimensions":["V","C"]}},"dataType":"INT","dimensions":2,"sizeOfDimensions":["V","C"],"unsigned":true,"structName":"auto_intVC"},"outputStruct":{"inOutType":{"type":"CandidateList","properties":{"unsigned":true,"dataType":"INT","dimensions":1,"sizeOfDimensions":["C"]}},"dataType":"INT","dimensions":1,"sizeOfDimensions":["C"],"unsigned":true,"structName":"auto_intC"},"nameContainer":{}},"lockedLineStart":2533,"lockedLineEnd":2619,"lockedBracePos":3170,"isNew":false}